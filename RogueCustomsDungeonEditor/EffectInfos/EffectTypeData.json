[
  {
    "InternalName": "DealDamage",
    "TreeViewDisplayText": "Deal ({Attack}) - ({Defense}) ({Element}) Damage to ({Target})",
    "ComboBoxDisplayName": "Deal Damage to Target",
    "Description": "Used by the User to damage Target.",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": false,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Attacker",
        "DisplayName": "Attacker",
        "Description": "What will deal damage. Generally Source, but can be anything.",
        "ParameterType": "ComboBox",
        "Default": "source",
        "ValidValues": [
          {
            "Key": "source",
            "Value": "Source"
          },
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Target",
        "DisplayName": "Target",
        "Description": "Who will receive the damage. Generally Target, but can be any Character.",
        "ParameterType": "ComboBox",
        "Default": "target",
        "ValidValues": [
          {
            "Key": "source",
            "Value": "Source"
          },
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Attack",
        "DisplayName": "Attack",
        "Description": "Base damage of the action, before Defense applies. Can be a flat number, Dice Notation, or a mathematical expression. Decimal numbers will be rounded down to the nearest integer.",
        "ParameterType": "Formula",
        "Default": "{source.Damage}",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Defense",
        "DisplayName": "Defense",
        "Description": "Reduces a certain amount of Attack to get the final damage value. Can be a flat number, Dice Notation, or a mathematical expression. Decimal numbers will be rounded down to the nearest integer.",
        "ParameterType": "Formula",
        "Default": "{target.Mitigation}",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Accuracy",
        "DisplayName": "Accuracy",
        "Description": "Indicates the odds for the Attack to land. Final Accuracy is calculated with Accuracy * (User's Accuracy - Target's Evasion)%.\n\nUser's Accuracy is calculated as 0 if it's not a Character. Target's Evasion is calculated as 0 if it's not a Character.",
        "ParameterType": "Odds",
        "Default": "100",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "BypassesAccuracyCheck",
        "DisplayName": "Bypasses Accuracy Modifiers?",
        "Description": "If true, the User's Accuracy (if it's a Character) and Target's Evasion will be ignored.",
        "ParameterType": "Boolean",
        "Default": "false",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "CriticalHitChance",
        "DisplayName": "Crit Chance",
        "Description": "Indicates the odds for the Attack to score a Critical Hit, if it lands.",
        "ParameterType": "Formula",
        "Default": "10",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "CriticalHitFormula",
        "DisplayName": "Crit Formula",
        "Description": "The damage formula to use if the Attack scores a Critical Hit.",
        "ParameterType": "Formula",
        "Default": "{CalculatedDamage} * 2",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Element",
        "DisplayName": "Element",
        "Description": "Indicates the Element used by the Action to deal damage.",
        "ParameterType": "Element",
        "Default": "",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "BypassesResistances",
        "DisplayName": "Bypasses Resistances?",
        "Description": "If true, the Target's Element's Resistance stat (if it has one) will be ignored.",
        "ParameterType": "Boolean",
        "Default": "false",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "BypassesElementEffect",
        "DisplayName": "Bypasses Element Effect?",
        "Description": "If true, the Action Element's OnAfterAttack Action will not be executed.",
        "ParameterType": "Boolean",
        "Default": "false",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "BurnMP",
    "TreeViewDisplayText": "Burn ({Power}) MP from ({Target})",
    "ComboBoxDisplayName": "Burn Target's MP",
    "Description": "Used by the User to remove some of Target's MP.",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": false,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Attacker",
        "DisplayName": "Attacker",
        "Description": "What will burn MP. Generally Source, but can be anything.",
        "ParameterType": "ComboBox",
        "Default": "source",
        "ValidValues": [
          {
            "Key": "source",
            "Value": "Source"
          },
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Target",
        "DisplayName": "Target",
        "Description": "Who will get MP burned. Generally Target, but can be any Character.",
        "ParameterType": "ComboBox",
        "Default": "target",
        "ValidValues": [
          {
            "Key": "source",
            "Value": "Source"
          },
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Power",
        "DisplayName": "Power",
        "Description": "Amount of MP that will be burned. Can be a flat number, Dice Notation, or a mathematical expression. Decimal numbers will be rounded down to the nearest integer.",
        "ParameterType": "Formula",
        "Default": "",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Accuracy",
        "DisplayName": "Accuracy",
        "Description": "Indicates the odds for the Attack to land. Final Accuracy is calculated with Accuracy * (User's Accuracy - Target's Evasion)%.\n\nUser's Accuracy is calculated as 0 if it's not a Character. Target's Evasion is calculated as 0 if it's not a Character.",
        "ParameterType": "Odds",
        "Default": "100",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "BypassesAccuracyCheck",
        "DisplayName": "Bypasses Accuracy Modifiers?",
        "Description": "If true, the User's Accuracy (if it's a Character) and Target's Evasion will be ignored.",
        "ParameterType": "Boolean",
        "Default": "false",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "RemoveHunger",
    "TreeViewDisplayText": "Remove ({Power}) Hunger from ({Target})",
    "ComboBoxDisplayName": "Remove Target's Hunger",
    "Description": "Used by the User to remove some of Target's Hunger.",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": false,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Attacker",
        "DisplayName": "Attacker",
        "Description": "What will remove Hunger. Generally Source, but can be anything.",
        "ParameterType": "ComboBox",
        "Default": "source",
        "ValidValues": [
          {
            "Key": "source",
            "Value": "Source"
          },
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Target",
        "DisplayName": "Target",
        "Description": "Who will get Hunger removed. Generally Target, but can be any Character.",
        "ParameterType": "ComboBox",
        "Default": "target",
        "ValidValues": [
          {
            "Key": "source",
            "Value": "Source"
          },
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Power",
        "DisplayName": "Power",
        "Description": "Amount of Hunger that will be removed. Can be a flat number, Dice Notation, or a mathematical expression. Decimal numbers will be rounded down to the nearest integer.",
        "ParameterType": "Formula",
        "Default": "",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Accuracy",
        "DisplayName": "Accuracy",
        "Description": "Indicates the odds for the Attack to land. Final Accuracy is calculated with Accuracy * (User's Accuracy - Target's Evasion)%.\n\nUser's Accuracy is calculated as 0 if it's not a Character. Target's Evasion is calculated as 0 if it's not a Character.",
        "ParameterType": "Odds",
        "Default": "100",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "BypassesAccuracyCheck",
        "DisplayName": "Bypasses Accuracy Modifiers?",
        "Description": "If true, the User's Accuracy (if it's a Character) and Target's Evasion will be ignored.",
        "ParameterType": "Boolean",
        "Default": "false",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "StealItem",
    "TreeViewDisplayText": "Steal an Item that is ({ItemType}) from Target",
    "ComboBoxDisplayName": "Steal Item from Target",
    "Description": "Used by the User take an item from Target's inventory and put it into their own.",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": false,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Target",
        "DisplayName": "Target",
        "Description": "Who will have an item stolen. Generally Target, but can be any Character.",
        "ParameterType": "ComboBox",
        "Default": "target",
        "ValidValues": [
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Accuracy",
        "DisplayName": "Accuracy",
        "Description": "Indicates the odds for an Item to be stolen. Final Accuracy is calculated with Accuracy * (User's Accuracy - Target's Evasion)%.\n\nUser's Accuracy is calculated as 0 if it's not a Character. Target's Evasion is calculated as 0 if it's not a Character.",
        "ParameterType": "Odds",
        "Default": "100",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "CanStealEquippables",
        "DisplayName": "Can Steal Equippables?",
        "Description": "If false, the User will pretend Target has no Weapons or Armor in their inventory.",
        "ParameterType": "Boolean",
        "Default": "true",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "CanStealConsumables",
        "DisplayName": "Can Steal Consumables?",
        "Description": "If false, the User will pretend Target has no Consumables in their inventory.",
        "ParameterType": "Boolean",
        "Default": "true",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "BypassesAccuracyCheck",
        "DisplayName": "Bypasses Accuracy Modifiers?",
        "Description": "If true, the User's Accuracy (if it's a Character) and Target's Evasion will be ignored.",
        "ParameterType": "Boolean",
        "Default": "true",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "ReplaceConsoleRepresentation",
    "TreeViewDisplayText": "Change Own Console Representation",
    "ComboBoxDisplayName": "Change Own Console Representation",
    "Description": "The way the calling object shows up in the Console Client will be modified.",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": false,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": false,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Character",
        "DisplayName": "Character",
        "Description": "The Character that will replace the current Console Representation's one.",
        "ParameterType": "Character",
        "Default": "",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": [ "BackColor", "ForeColor" ]
      },
      {
        "InternalName": "BackColor",
        "DisplayName": "Background Color",
        "Description": "The Background Color that will replace the current Console Representation's one.",
        "ParameterType": "Color",
        "Default": "0,0,0,255",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": [ "Character", "ForeColor" ]
      },
      {
        "InternalName": "ForeColor",
        "DisplayName": "Foreground Color",
        "Description": "The Foreground Color that will replace the current Console Representation's one.",
        "ParameterType": "Color",
        "Default": "255,255,255,255",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": [ "Character", "BackColor" ]
      }
    ]
  },
  {
    "InternalName": "ResetConsoleRepresentation",
    "TreeViewDisplayText": "Reset Own Console Representation",
    "ComboBoxDisplayName": "Reset Own Console Representation",
    "Description": "The display appearance of User in the Console Client will be turned back into the original.",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": false,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": false,
    "IsControlBlock": false,
    "Parameters": []
  },
  {
    "InternalName": "Remove",
    "TreeViewDisplayText": "Remove ({Target}) from Game",
    "ComboBoxDisplayName": "Remove Target from Game",
    "Description": "The User will try to remove Target.",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": true,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Target",
        "DisplayName": "Target",
        "Description": "What will be removed. Generally Target, but can be anything.",
        "ParameterType": "ComboBox",
        "Default": "target",
        "ValidValues": [
          {
            "Key": "this",
            "Value": "This"
          },
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Accuracy",
        "DisplayName": "Accuracy",
        "Description": "Indicates the odds for Target to be removed. Final Accuracy is calculated with Accuracy * (User's Accuracy - Target's Evasion)%.\n\nUser's Accuracy is calculated as 0 if it's not a Character. Target's Evasion is calculated as 0 if it's not a Character.",
        "ParameterType": "Odds",
        "Default": "100",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "BypassesAccuracyCheck",
        "DisplayName": "Bypasses Accuracy Modifiers?",
        "Description": "If true, the User's Accuracy (if it's a Character) and Target's Evasion will be ignored.",
        "ParameterType": "Boolean",
        "Default": "true",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "PrintText",
    "TreeViewDisplayText": "Print ({Text}) to Message Log",
    "ComboBoxDisplayName": "Print Text to Message Log",
    "Description": "If Player can see the User (if visibility checks must apply), text will be printed into the Message Log.",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": true,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": false,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Text",
        "DisplayName": "Text",
        "Description": "What will be printed. Can be a Locale.",
        "ParameterType": "Text",
        "Default": "",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Color",
        "DisplayName": "Color",
        "Description": "The Color in which the Text will be printed. If left empty, it will be white.",
        "ParameterType": "Color",
        "Default": "255,255,255,255",
        "ValidValues": [],
        "Required": false,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "BypassesVisibilityCheck",
        "DisplayName": "Print even if not visible?",
        "Description": "If true, the message will be printed even if the Player can't see the User.",
        "ParameterType": "Boolean",
        "Default": "false",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "MessageBox",
    "TreeViewDisplayText": "Show a Message Box with Title ({Title}) and Text ({Text})",
    "ComboBoxDisplayName": "Show a Message Box",
    "Description": "Player will see a Message Box on their next turn.",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": false,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": false,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Title",
        "DisplayName": "Title",
        "Description": "The Message Box's Title. Can be a Locale.",
        "ParameterType": "Text",
        "Default": "",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Text",
        "DisplayName": "Text",
        "Description": "The text in the middle of the Message Box. Can be a Locale.",
        "ParameterType": "Text",
        "Default": "",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Color",
        "DisplayName": "Color",
        "Description": "The Color of the Message Box border.",
        "ParameterType": "Color",
        "Default": "255,255,255,255",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "HealDamage",
    "TreeViewDisplayText": "Heal up to ({Power}) HP from ({Target})",
    "ComboBoxDisplayName": "Heal Target",
    "Description": "Used by the User to heal Target.",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": false,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Source",
        "DisplayName": "Source",
        "Description": "What will heal. Generally the User, but can be anything.",
        "ParameterType": "ComboBox",
        "Default": "source",
        "ValidValues": [
          {
            "Key": "source",
            "Value": "Source"
          },
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Target",
        "DisplayName": "Target",
        "Description": "Who will be healed. Generally Target, but can be any Character.",
        "ParameterType": "ComboBox",
        "Default": "target",
        "ValidValues": [
          {
            "Key": "source",
            "Value": "Source"
          },
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Power",
        "DisplayName": "Healing Power",
        "Description": "Maximum Amount of Damage that will be healed. Can be a flat number, Dice Notation, or a mathematical expression. Decimal numbers will be rounded down to the nearest integer.",
        "ParameterType": "Formula",
        "Default": "{source.Power}",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "ReplenishMP",
    "TreeViewDisplayText": "Recover up to ({Power}) MP from ({Target})",
    "ComboBoxDisplayName": "Recover some of Target's MP",
    "Description": "Used by the User to give Target some MP.",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": false,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Source",
        "DisplayName": "Source",
        "Description": "What will give MP. Generally the User, but can be anything.",
        "ParameterType": "ComboBox",
        "Default": "source",
        "ValidValues": [
          {
            "Key": "source",
            "Value": "Source"
          },
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Target",
        "DisplayName": "Target",
        "Description": "Who will get MP. Generally Target, but can be any Character.",
        "ParameterType": "ComboBox",
        "Default": "target",
        "ValidValues": [
          {
            "Key": "source",
            "Value": "Source"
          },
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Power",
        "DisplayName": "MP Recovery",
        "Description": "Maximum Amount of MP that will be recovered. Can be a flat number, Dice Notation, or a mathematical expression. Decimal numbers will be rounded down to the nearest integer.",
        "ParameterType": "Formula",
        "Default": "{source.Power}",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "ReplenishHunger",
    "TreeViewDisplayText": "Recover up to ({Power}) Hunger from ({Target})",
    "ComboBoxDisplayName": "Recover some of Target's Hunger",
    "Description": "Used by the User to give Target some Hunger.",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": false,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Source",
        "DisplayName": "Source",
        "Description": "What will give Hunger. Generally the User, but can be anything.",
        "ParameterType": "ComboBox",
        "Default": "source",
        "ValidValues": [
          {
            "Key": "source",
            "Value": "Source"
          },
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Target",
        "DisplayName": "Target",
        "Description": "Who will get Hunger. Generally Target, but can be any Character.",
        "ParameterType": "ComboBox",
        "Default": "target",
        "ValidValues": [
          {
            "Key": "source",
            "Value": "Source"
          },
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Power",
        "DisplayName": "Hunger Recovery",
        "Description": "Maximum Amount of Hunger that will be recovered. Can be a flat number, Dice Notation, or a mathematical expression. Decimal numbers will be rounded down to the nearest integer.",
        "ParameterType": "Formula",
        "Default": "{source.Power}",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "GiveExperience",
    "TreeViewDisplayText": "Give ({Amount}) Experience to ({Target})",
    "ComboBoxDisplayName": "Give Experience to Target",
    "Description": "Used by the User to give Target some experience points.",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": false,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Target",
        "DisplayName": "Target",
        "Description": "Who will be healed. Generally Target, but can be any Character.",
        "ParameterType": "ComboBox",
        "Default": "target",
        "ValidValues": [
          {
            "Key": "source",
            "Value": "Source"
          },
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Amount",
        "DisplayName": "Amount",
        "Description": "Amount of Experience Points to be given. Can be a flat number, Dice Notation, or a mathematical expression. Decimal numbers will be rounded down to the nearest integer.",
        "ParameterType": "Formula",
        "Default": "{this.experiencepayout}",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "ApplyAlteredStatus",
    "TreeViewDisplayText": "Status ({Target}) with ({Id})",
    "ComboBoxDisplayName": "Apply Altered Status on Target",
    "Description": "Used by the User to put an Altered Status on Target.",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": false,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Id",
        "DisplayName": "Id",
        "Description": "Class Id of the Altered Status to apply.",
        "ParameterType": "AlteredStatus",
        "Default": "",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Target",
        "DisplayName": "Target",
        "Description": "Who will be healed. Generally Target, but can be any Character.",
        "ParameterType": "ComboBox",
        "Default": "target",
        "ValidValues": [
          {
            "Key": "source",
            "Value": "Source"
          },
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Accuracy",
        "DisplayName": "Accuracy",
        "Description": "Indicates the odds for Target to receive the Altered Status, if applicable. Final Accuracy is calculated with Accuracy * (User's Accuracy - Target's Evasion)%.\n\nUser's Accuracy is calculated as 0 if it's not a Character. Target's Evasion is calculated as 0 if it's not a Character.",
        "ParameterType": "Odds",
        "Default": "100",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Power",
        "DisplayName": "Status Power",
        "Description": "Sets the Altered Status's Power. Can be a flat number, Dice Notation, or a mathematical expression. Decimal numbers will be rounded down to the nearest integer.",
        "ParameterType": "Formula",
        "Default": "",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "TurnLength",
        "DisplayName": "Duration",
        "Description": "Indicates how long the Altered Status will apply. Negative values indicate indefinite duration.",
        "ParameterType": "Number",
        "Default": "1",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "BypassesAccuracyCheck",
        "DisplayName": "Bypasses Accuracy Modifiers?",
        "Description": "If true, the User's Accuracy (if it's a Character) and Target's Evasion will be ignored.",
        "ParameterType": "Boolean",
        "Default": "true",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "ApplyStatAlteration",
    "TreeViewDisplayText": "Modify ({Target})'s ({Stat}) by ({Amount}) for ({TurnLength}) turns",
    "ComboBoxDisplayName": "Alter one of Target's Stats",
    "Description": "Used by the User to increase or decrease one of Target's stats.",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": false,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Id",
        "DisplayName": "Id",
        "Description": "Identifier for the Stat Alteration. Used to check whether two different Alterations represent the same thing.",
        "ParameterType": "Text",
        "Default": "{this}",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Target",
        "DisplayName": "Target",
        "Description": "Who will be healed. Generally Target, but can be any Character.",
        "ParameterType": "ComboBox",
        "Default": "target",
        "ValidValues": [
          {
            "Key": "source",
            "Value": "Source"
          },
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Stat",
        "DisplayName": "Stat",
        "Description": "Indicates the Stat that will be Altered.\n\nRemember that the displayed options are internal names - display names depend on the Locale.",
        "ParameterType": "Stat",
        "Default": "",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Accuracy",
        "DisplayName": "Accuracy",
        "Description": "Indicates the odds for Target to receive the Stat Alteration, if applicable. Final Accuracy is calculated with Accuracy * (User's Accuracy - Target's Evasion)%.\n\nUser's Accuracy is calculated as 0 if it's not a Character. Target's Evasion is calculated as 0 if it's not a Character.",
        "ParameterType": "Odds",
        "Default": "100",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "BypassesAccuracyCheck",
        "DisplayName": "Bypasses Accuracy Modifiers?",
        "Description": "If true, the User's Accuracy (if it's a Character) and Target's Evasion will be ignored.",
        "ParameterType": "Boolean",
        "Default": "true",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Amount",
        "DisplayName": "Amount",
        "Description": "How much the Stat will be modified. Can be a flat number, Dice Notation, or a mathematical expression. Decimal numbers will be rounded down to the nearest integer.",
        "ParameterType": "Formula",
        "Default": "1",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "TurnLength",
        "DisplayName": "Duration",
        "Description": "Indicates how long the Stat Alteration will apply. Negative values indicate indefinite duration.",
        "ParameterType": "Number",
        "Default": "1",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "CanBeStacked",
        "DisplayName": "Can Stack?",
        "Description": "If enabled, multiple Stat Alterations with the same Id can be present on the same Character at the same time.",
        "ParameterType": "Boolean",
        "Default": "false",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "DisplayOnLog",
        "DisplayName": "Display on Log?",
        "Description": "If enabled, the stat alteration will be informed in the Message Log. Disabling it can be useful for items that alter your stats when equipped.",
        "ParameterType": "Boolean",
        "Default": "true",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "CleanseAlteredStatus",
    "TreeViewDisplayText": "Remove ({Id}) Altered Status from ({Target})",
    "ComboBoxDisplayName": "Remove Altered Status from Target",
    "Description": "Used by the User to remove a certain Altered Status on Target. Stat Alterations with the same Id as an Altered Status will be removed as well.",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": false,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Id",
        "DisplayName": "Id",
        "Description": "Class Id of the Altered Status to remove.",
        "ParameterType": "AlteredStatus",
        "Default": "",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Target",
        "DisplayName": "Target",
        "Description": "Who will get an Altered Status removed. Generally Target, but can be any Character.",
        "ParameterType": "ComboBox",
        "Default": "target",
        "ValidValues": [
          {
            "Key": "source",
            "Value": "Source"
          },
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Accuracy",
        "DisplayName": "Accuracy",
        "Description": "Indicates the odds for Target to get the Altered Status removed, if applicable. Final Accuracy is calculated with Accuracy * (User's Accuracy - Target's Evasion)%.\n\nUser's Accuracy is calculated as 0 if it's not a Character. Target's Evasion is calculated as 0 if it's not a Character.",
        "ParameterType": "Odds",
        "Default": "100",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "BypassesAccuracyCheck",
        "DisplayName": "Bypasses Accuracy Modifiers?",
        "Description": "If true, the User's Accuracy (if it's a Character) and Target's Evasion will be ignored.",
        "ParameterType": "Boolean",
        "Default": "true",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "CleanseStatAlteration",
    "TreeViewDisplayText": "Remove all Alterations from ({Target})'s ({Stat})",
    "ComboBoxDisplayName": "Remove all Alterations from one of Target's Stats",
    "Description": "Used by the User to remove all the removable Alterations on one of Target's Stats. Altered Statuses with the same Id as a Stat Alteration will be removed as well.",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": false,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Stat",
        "DisplayName": "Stat",
        "Description": "Indicates the Stat whose Alterations will be removed.\n\nRemember that the displayed options are internal names - display names depend on the Locale.",
        "ParameterType": "ComboBox",
        "Default": "",
        "ValidValues": [
          {
            "Key": "maxHP",
            "Value": "Max HP"
          },
          {
            "Key": "maxMP",
            "Value": "Max MP"
          },
          {
            "Key": "attack",
            "Value": "Attack"
          },
          {
            "Key": "defense",
            "Value": "Defense"
          },
          {
            "Key": "movement",
            "Value": "Movement"
          },
          {
            "Key": "hpRegeneration",
            "Value": "HP Regeneration"
          },
          {
            "Key": "mpRegeneration",
            "Value": "MP Regeneration"
          },
          {
            "Key": "accuracy",
            "Value": "Accuracy"
          },
          {
            "Key": "evasion",
            "Value": "Evasion"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Target",
        "DisplayName": "Target",
        "Description": "Who will get a Stat Alteration removed. Generally Target, but can be any Character.",
        "ParameterType": "ComboBox",
        "Default": "target",
        "ValidValues": [
          {
            "Key": "source",
            "Value": "Source"
          },
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Accuracy",
        "DisplayName": "Accuracy",
        "Description": "Indicates the odds for Target to get all Stat Alterations removed, if applicable. Final Accuracy is calculated with Accuracy * (User's Accuracy - Target's Evasion)%.\n\nUser's Accuracy is calculated as 0 if it's not a Character. Target's Evasion is calculated as 0 if it's not a Character.",
        "ParameterType": "Odds",
        "Default": "100",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "BypassesAccuracyCheck",
        "DisplayName": "Bypasses Accuracy Modifiers?",
        "Description": "If true, the User's Accuracy (if it's a Character) and Target's Evasion will be ignored.",
        "ParameterType": "Boolean",
        "Default": "true",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "CleanseAllAlteredStatuses",
    "TreeViewDisplayText": "Remove all Altered Statuses from ({Target})",
    "ComboBoxDisplayName": "Remove all Altered Statuses from Target",
    "Description": "Used by the User to remove all removable Altered Statuses on Target. Stat Alterations with the same Id as an Altered Status will be removed as well.",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": false,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Target",
        "DisplayName": "Target",
        "Description": "Who will have all Altered Statuses removed. Generally Target, but can be any Character.",
        "ParameterType": "ComboBox",
        "Default": "target",
        "ValidValues": [
          {
            "Key": "source",
            "Value": "Source"
          },
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Accuracy",
        "DisplayName": "Accuracy",
        "Description": "Indicates the odds for Target to get the Altered Status removed, if applicable. Final Accuracy is calculated with Accuracy * (User's Accuracy - Target's Evasion)%.\n\nUser's Accuracy is calculated as 0 if it's not a Character. Target's Evasion is calculated as 0 if it's not a Character.",
        "ParameterType": "Odds",
        "Default": "100",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "BypassesAccuracyCheck",
        "DisplayName": "Bypasses Accuracy Modifiers?",
        "Description": "If true, the User's Accuracy (if it's a Character) and Target's Evasion will be ignored.",
        "ParameterType": "Boolean",
        "Default": "true",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "CleanseStatAlterations",
    "TreeViewDisplayText": "Remove all Alterations from all of ({Target})'s Stats",
    "ComboBoxDisplayName": "Remove all Alterations from all of Target's Stats",
    "Description": "Used by the User to remove all the removable Alterations on all of Target's Stats. Altered Statuses with the same Id as a Stat Alteration will be removed as well.",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": false,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Target",
        "DisplayName": "Target",
        "Description": "Who will get all Stat Alterations removed. Generally Target, but can be any Character.",
        "ParameterType": "ComboBox",
        "Default": "target",
        "ValidValues": [
          {
            "Key": "source",
            "Value": "Source"
          },
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Accuracy",
        "DisplayName": "Accuracy",
        "Description": "Indicates the odds for Target to get all Stat Alterations removed, if applicable. Final Accuracy is calculated with Accuracy * (User's Accuracy - Target's Evasion)%.\n\nUser's Accuracy is calculated as 0 if it's not a Character. Target's Evasion is calculated as 0 if it's not a Character.",
        "ParameterType": "Odds",
        "Default": "100",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "BypassesAccuracyCheck",
        "DisplayName": "Bypasses Accuracy Modifiers?",
        "Description": "If true, the User's Accuracy (if it's a Character) and Target's Evasion will be ignored.",
        "ParameterType": "Boolean",
        "Default": "true",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "ForceSkipTurn",
    "TreeViewDisplayText": "Make ({Target}) skip the next turn",
    "ComboBoxDisplayName": "Make Target skip the next turn",
    "Description": "Used by the User to make Target skip their next turn.",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": false,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Target",
        "DisplayName": "Target",
        "Description": "Who will have the next turn skipped. Generally Target, but can be any Character.",
        "ParameterType": "ComboBox",
        "Default": "target",
        "ValidValues": [
          {
            "Key": "source",
            "Value": "Source"
          },
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Accuracy",
        "DisplayName": "Accuracy",
        "Description": "Indicates the odds for Target to have their next turn skipped. Final Accuracy is calculated with Accuracy * (User's Accuracy - Target's Evasion)%.\n\nUser's Accuracy is calculated as 0 if it's not a Character. Target's Evasion is calculated as 0 if it's not a Character.",
        "ParameterType": "Odds",
        "Default": "100",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "BypassesAccuracyCheck",
        "DisplayName": "Bypasses Accuracy Modifiers?",
        "Description": "If true, the User's Accuracy (if it's a Character) and Target's Evasion will be ignored.",
        "ParameterType": "Boolean",
        "Default": "true",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "GenerateStairs",
    "TreeViewDisplayText": "Spawn Stairs",
    "ComboBoxDisplayName": "Spawn Stairs",
    "Description": "Stairs will appear in the current Floor, if there weren't any before.",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": false,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": false,
    "Parameters": []
  },
  {
    "InternalName": "Teleport",
    "TreeViewDisplayText": "Teleport ({Target}) to another Tile",
    "ComboBoxDisplayName": "Teleport the Target",
    "Description": "User will teleport the Target to a random unoccupied Floor tile.\nFails if Target is in a Hallway tile.",
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Target",
        "DisplayName": "Target",
        "Description": "Who will be Teleported. Generally Target, but can be any Character.",
        "ParameterType": "ComboBox",
        "Default": "target",
        "ValidValues": [
          {
            "Key": "source",
            "Value": "Source"
          },
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Accuracy",
        "DisplayName": "Accuracy",
        "Description": "Indicates the odds for Target to be teleported. Final Accuracy is calculated with Accuracy * (User's Accuracy - Target's Evasion)%.\n\nUser's Accuracy is calculated as 0 if it's not a Character. Target's Evasion is calculated as 0 if it's not a Character.",
        "ParameterType": "Odds",
        "Default": "100",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "BypassesAccuracyCheck",
        "DisplayName": "Bypasses Accuracy Modifiers?",
        "Description": "If true, the User's Accuracy (if it's a Character) and Target's Evasion will be ignored.",
        "ParameterType": "Boolean",
        "Default": "true",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "ToggleVisibility",
    "TreeViewDisplayText": "Change ({Target})'s Visibility",
    "ComboBoxDisplayName": "Change Target's visibility",
    "Description": "User will make the Target invisible (if they were visible) or visible (if they were invisible).",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": false,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Target",
        "DisplayName": "Target",
        "Description": "Who will get their Visibility changed. Generally Target, but can be any Character.",
        "ParameterType": "ComboBox",
        "Default": "target",
        "ValidValues": [
          {
            "Key": "source",
            "Value": "Source"
          },
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Accuracy",
        "DisplayName": "Accuracy",
        "Description": "Indicates the odds for Target to get their Visibility changed. Final Accuracy is calculated with Accuracy * (User's Accuracy - Target's Evasion)%.\n\nUser's Accuracy is calculated as 0 if it's not a Character. Target's Evasion is calculated as 0 if it's not a Character.",
        "ParameterType": "Odds",
        "Default": "100",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "BypassesAccuracyCheck",
        "DisplayName": "Bypasses Accuracy Modifiers?",
        "Description": "If true, the User's Accuracy (if it's a Character) and Target's Evasion will be ignored.",
        "ParameterType": "Boolean",
        "Default": "true",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "GiveItem",
    "TreeViewDisplayText": "Give ({Target}) a ({Id}) ({WhereFrom})",
    "ComboBoxDisplayName": "Give Item to Target",
    "Description": "User will give an item Target (if possible).\nItem may come from Source's inventory, or come out of thin air",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": false,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Source",
        "DisplayName": "Source",
        "Description": "Who will give the Item. Generally Source, but can be any Character.",
        "ParameterType": "ComboBox",
        "Default": "source",
        "ValidValues": [
          {
            "Key": "source",
            "Value": "Source"
          },
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Target",
        "DisplayName": "Target",
        "Description": "Who will receive the Item. Generally Target, but can be any Character.",
        "ParameterType": "ComboBox",
        "Default": "target",
        "ValidValues": [
          {
            "Key": "source",
            "Value": "Source"
          },
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Id",
        "DisplayName": "Id",
        "Description": "Class Id of the Item to give.",
        "ParameterType": "Item",
        "Default": "",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "FromInventory",
        "DisplayName": "Must be in Inventory",
        "Description": "If true, this fails if Source does not have the Item in the Inventory. If it succeeds, they give away said item.\n\nIf false, the Item materializes out of nowhere.",
        "ParameterType": "Boolean",
        "Default": "true",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Accuracy",
        "DisplayName": "Accuracy",
        "Description": "Indicates the odds for Target to get an Item given. Final Accuracy is calculated with Accuracy * (User's Accuracy - Target's Evasion)%.\n\nUser's Accuracy is calculated as 0 if it's not a Character. Target's Evasion is calculated as 0 if it's not a Character.",
        "ParameterType": "Odds",
        "Default": "100",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "BypassesAccuracyCheck",
        "DisplayName": "Bypasses Accuracy Modifiers?",
        "Description": "If true, the User's Accuracy (if it's a Character) and Target's Evasion will be ignored.",
        "ParameterType": "Boolean",
        "Default": "true",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "TransformTile",
    "TreeViewDisplayText": "Convert the Tile into ({TileType})",
    "ComboBoxDisplayName": "Convert Tile",
    "Description": "User will convert the Tile.\nFails if the Tile is occupied, adjacent to an empty tile, or if it prevents map completeness.",
    "CanBeUsedOnEntity": false,
    "CanBeUsedOnTile": true,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "TileType",
        "DisplayName": "Tile Type",
        "Description": "The type this Tile will be converted to.",
        "ParameterType": "ComboBox",
        "Default": "Wall",
        "ValidValues": [
          {
            "Key": "Wall",
            "Value": "Wall"
          },
          {
            "Key": "Floor",
            "Value": "Floor"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Accuracy",
        "DisplayName": "Accuracy",
        "Description": "Indicates the odds for the Tile to be transformed. Final Accuracy is calculated with Accuracy * User's Accuracy%.\n\nUser's Accuracy is calculated as 0 if it's not a Character. Target's Evasion is calculated as 0 if it's not a Character.",
        "ParameterType": "Odds",
        "Default": "100",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "BypassesAccuracyCheck",
        "DisplayName": "Bypasses Accuracy Modifiers?",
        "Description": "If true, the User's Accuracy (if it's a Character) and Target's Evasion will be ignored.",
        "ParameterType": "Boolean",
        "Default": "true",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "PlaceTrap",
    "TreeViewDisplayText": "Place ({Id}) Trap on the Tile",
    "ComboBoxDisplayName": "Place Trap on Tile",
    "Description": "User will place a Trap on the Tile.\nFails if the Tile already has one, or if it's not a Floor or Hallway Tile.",
    "CanBeUsedOnEntity": false,
    "CanBeUsedOnTile": true,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Id",
        "DisplayName": "Id",
        "Description": "Class Id of the Trap to place.",
        "ParameterType": "Trap",
        "Default": "",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Accuracy",
        "DisplayName": "Accuracy",
        "Description": "Indicates the odds to get a Trap placed. Final Accuracy is calculated with Accuracy * (User's Accuracy - Target's Evasion)%.\n\nUser's Accuracy is calculated as 0 if it's not a Character. Target's Evasion is calculated as 0 if it's not a Character.",
        "ParameterType": "Odds",
        "Default": "100",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "BypassesAccuracyCheck",
        "DisplayName": "Bypasses Accuracy Modifiers?",
        "Description": "If true, the User's Accuracy (if it's a Character) and Target's Evasion will be ignored.",
        "ParameterType": "Boolean",
        "Default": "true",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "SpawnNPC",
    "TreeViewDisplayText": "Spawn ({Id}) NPC on the Tile",
    "ComboBoxDisplayName": "Spawn NPC on Tile",
    "Description": "User will spawn an NPC of the specified Class on the Tile.\nThe NPC will be of the same Faction as the User.\nFails if the Tile is occupied or isn't walkable.",
    "CanBeUsedOnEntity": false,
    "CanBeUsedOnTile": true,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Id",
        "DisplayName": "Id",
        "Description": "Class Id of the NPC to Spawn.",
        "ParameterType": "NPC",
        "Default": "",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Level",
        "DisplayName": "Level",
        "Description": "Indicates the Level of the spawned NPC.",
        "ParameterType": "Number",
        "Default": "1",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Accuracy",
        "DisplayName": "Accuracy",
        "Description": "Indicates the odds for an NPC to be Spawned. Final Accuracy is calculated with Accuracy * (User's Accuracy - Target's Evasion)%.\n\nUser's Accuracy is calculated as 0 if it's not a Character. Target's Evasion is calculated as 0 if it's not a Character.",
        "ParameterType": "Odds",
        "Default": "100",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "BypassesAccuracyCheck",
        "DisplayName": "Bypasses Accuracy Modifiers?",
        "Description": "If true, the User's Accuracy (if it's a Character) and Target's Evasion will be ignored.",
        "ParameterType": "Boolean",
        "Default": "true",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "ReviveNPC",
    "TreeViewDisplayText": "Revive an allied NPC on the Tile",
    "ComboBoxDisplayName": "Revive NPC on Tile",
    "Description": "User will revive an NPC of their Faction on the Tile.\nThe NPC will have full HP and MP.\nIf there are multiple valid NPCs, it will revive one at random.",
    "CanBeUsedOnEntity": false,
    "CanBeUsedOnTile": true,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Accuracy",
        "DisplayName": "Accuracy",
        "Description": "Indicates the odds for the Target tile to get an NPC revived. Final Accuracy is calculated with Accuracy * (User's Accuracy - Target's Evasion)%.\n\nUser's Accuracy is calculated as 0 if it's not a Character. Target's Evasion is calculated as 0 if it's not a Character.",
        "ParameterType": "Odds",
        "Default": "100",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "BypassesAccuracyCheck",
        "DisplayName": "Bypasses Accuracy Modifiers?",
        "Description": "If true, the User's Accuracy (if it's a Character) and Target's Evasion will be ignored.",
        "ParameterType": "Boolean",
        "Default": "true",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "CheckCondition",
    "TreeViewDisplayText": "Check if ({Condition}) is true",
    "ComboBoxDisplayName": "Run Condition",
    "Description": "Evaluates a boolean expression.\n\nIf the expression returns true, it's a Success.\nIf the expression returns false, it's Failure.",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": true,
    "CanHaveThenChild": false,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Condition",
        "DisplayName": "Condition",
        "Description": "The boolean expression to be evaluated.",
        "ParameterType": "BooleanExpression",
        "Default": "",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "SetFlag",
    "TreeViewDisplayText": "Set ({Key}) Flag to ({Value})",
    "ComboBoxDisplayName": "Create or Update Flag",
    "Description": "The Dungeon will create a new Flag with the set name, or update its value if it already exists.\n\nDepending on parameters, Flags can persist through Floors.\n\nRemember to Set a flag before using it.\n\nSetFlag will throw an error if it's attempted to use on a flag that is currently used as a For counter",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": true,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": false,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Key",
        "DisplayName": "Key",
        "Description": "The Flag's name.",
        "ParameterType": "Key",
        "Default": "",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Value",
        "DisplayName": "Value",
        "Description": "The value to set on the Flag. Can be a value, a formula, or a string.",
        "ParameterType": "Text",
        "Default": "",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "RemoveOnFloorChange",
        "DisplayName": "Remove when in a new Floor?",
        "Description": "If checked, the Flag will be removed upon using the stairs.\nIf false, the Flag will persist until the end of the game.\n\nIf the Flag already existed, this has no effect.",
        "ParameterType": "Boolean",
        "Default": "true",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "CallScript",
    "TreeViewDisplayText": "Call Script ({ScriptId})",
    "ComboBoxDisplayName": "Call a Script",
    "Description": "The Dungeon will call the Script of choice.",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": true,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": false,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "ScriptId",
        "DisplayName": "Script Id",
        "Description": "The Id of the Script to be run.",
        "ParameterType": "Script",
        "Default": "",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "LearnScript",
    "TreeViewDisplayText": "Have ({Target}) learn Script ({ScriptId})",
    "ComboBoxDisplayName": "Learn a Script",
    "Description": "Target will include the Script of choice to their list of On Attack actions. Fails if the target already knows the Script.",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": true,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Target",
        "DisplayName": "Target",
        "Description": "Who will learn the Script. Generally Target, but can be any Character.",
        "ParameterType": "ComboBox",
        "Default": "target",
        "ValidValues": [
          {
            "Key": "source",
            "Value": "Source"
          },
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "ScriptId",
        "DisplayName": "Script Id",
        "Description": "The Id of the Script to be learned.",
        "ParameterType": "Script",
        "Default": "",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Accuracy",
        "DisplayName": "Accuracy",
        "Description": "Indicates the odds for the Target to learn the Script. Final Accuracy is calculated with Accuracy * (User's Accuracy - Target's Evasion)%.\n\nUser's Accuracy is calculated as 0 if it's not a Character. Target's Evasion is calculated as 0 if it's not a Character.",
        "ParameterType": "Odds",
        "Default": "100",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "BypassesAccuracyCheck",
        "DisplayName": "Bypasses Accuracy Modifiers?",
        "Description": "If true, the User's Accuracy (if it's a Character) and Target's Evasion will be ignored.",
        "ParameterType": "Boolean",
        "Default": "true",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "InformThePlayer",
        "DisplayName": "Inform the Player?",
        "Description": "If true, the Player will be informed of this Script being learnt.",
        "ParameterType": "Boolean",
        "Default": "true",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "ForgetScript",
    "TreeViewDisplayText": "Have ({Target}) forget Script ({ScriptId})",
    "ComboBoxDisplayName": "Forget a Script",
    "Description": "Target will remove the Script of choice to their list of On Attack actions. Fails if the target doesn't already know the Script.",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": true,
    "CanHaveThenChild": true,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": false,
    "Parameters": [
      {
        "InternalName": "Target",
        "DisplayName": "Target",
        "Description": "Who will forget the Script. Generally Target, but can be any Character.",
        "ParameterType": "ComboBox",
        "Default": "target",
        "ValidValues": [
          {
            "Key": "source",
            "Value": "Source"
          },
          {
            "Key": "target",
            "Value": "Target"
          }
        ],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "ScriptId",
        "DisplayName": "Script Id",
        "Description": "The Id of the Script to be forgotten.",
        "ParameterType": "Script",
        "Default": "",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Accuracy",
        "DisplayName": "Accuracy",
        "Description": "Indicates the odds for the Target to forget the Script. Final Accuracy is calculated with Accuracy * (User's Accuracy - Target's Evasion)%.\n\nUser's Accuracy is calculated as 0 if it's not a Character. Target's Evasion is calculated as 0 if it's not a Character.",
        "ParameterType": "Odds",
        "Default": "100",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "BypassesAccuracyCheck",
        "DisplayName": "Bypasses Accuracy Modifiers?",
        "Description": "If true, the User's Accuracy (if it's a Character) and Target's Evasion will be ignored.",
        "ParameterType": "Boolean",
        "Default": "true",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "InformThePlayer",
        "DisplayName": "Inform the Player?",
        "Description": "If true, the Player will be informed of this Script being learnt.",
        "ParameterType": "Boolean",
        "Default": "true",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "While",
    "TreeViewDisplayText": "While ({Condition}) is true...",
    "ComboBoxDisplayName": "Enter While loop",
    "Description": "Evaluates a boolean expression.\n\nIf the expression returns true, it enters the loop.\nIf the expression returns false, it skips the loop.\n\nThe condition is reevaluated once the loop reaches a dead-end.",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": true,
    "CanHaveThenChild": false,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": true,
    "Parameters": [
      {
        "InternalName": "Condition",
        "DisplayName": "Condition",
        "Description": "The boolean expression to be evaluated.",
        "ParameterType": "BooleanExpression",
        "Default": "",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  },
  {
    "InternalName": "For",
    "TreeViewDisplayText": "For ({CounterFlagKey}), from ({InitialValue}) to ({EndValue}), incrementing by ({Increment})...",
    "ComboBoxDisplayName": "Enter For loop",
    "Description": "Sets [CounterFlagKey] to Start.\n\nIf [CounterFlagKey] <= End, it enters the loop, and increases [CounterFlagKey] by Increment.\n\nThe loop ends if [CounterFlagKey] > End",
    "CanBeUsedOnEntity": true,
    "CanBeUsedOnTile": true,
    "CanHaveThenChild": false,
    "CanHaveOnSuccessOnFailureChild": true,
    "IsControlBlock": true,
    "Parameters": [
      {
        "InternalName": "CounterFlagKey",
        "DisplayName": "Counter Flag Key",
        "Description": "Key for the Flag that will be used as a counter.",
        "ParameterType": "Key",
        "Default": "Counter",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "InitialValue",
        "DisplayName": "Start",
        "Description": "The value where the counter starts.\n\nPlease note that For loops are of the [1;N] type rather than the [0;N) C-Style For loops.",
        "ParameterType": "Formula",
        "Default": "1",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "EndValue",
        "DisplayName": "End",
        "Description": "The value where the For loop ends if it's lower than the Counter.\n\nPlease note that For loops are of the [1;N] type rather than the [0;N) C-Style For loops.",
        "ParameterType": "Formula",
        "Default": "",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      },
      {
        "InternalName": "Increment",
        "DisplayName": "Increment",
        "Description": "At the end of each execution of the For loop, the Counter will be increased by this value.",
        "ParameterType": "Formula",
        "Default": "1",
        "ValidValues": [],
        "Required": true,
        "OptionalIfFieldsHaveValue": []
      }
    ]
  }
]